// import { filter, map } from 'fp-ts/es6/Array'
// import { flow } from 'fp-ts/es6/function'
// import { tweets } from '../../private/tweets'

// const joinedOwnTweets: string = flow(
//   map(
//     ({ full_text: fullText, ..._others }: { full_text: string }): string =>
//       fullText
//   ),
//   filter((fullText: string): boolean => !fullText.startsWith('RT @'))
// )(tweets).join('')

// // eslint-disable-next-line
// export const charCounts = joinedOwnTweets
//   // .replace(/[^ \n:"'`.,#A-Za-z0-9?!@]/g, '')
//   .split('')
//   .reduce(
//     (counts: any, char: string): any => {
//       if (counts[char]) {
//         counts[char] = counts[char] + 1
//       } else {
//         counts[char] = 1
//       }
//       return counts
//     },
//     {} as any
//   )

// console.log(JSON.stringify({ charCounts }, null, 2))

export const charCounts = {
  '0': 224,
  '1': 271,
  '2': 227,
  '3': 154,
  '4': 130,
  '5': 97,
  '6': 114,
  '7': 106,
  '8': 113,
  '9': 110,
  T: 751,
  h: 7199,
  e: 18459,
  ' ': 33245,
  b: 3070,
  i: 11675,
  g: 3899,
  s: 10641,
  t: 15970,
  r: 9957,
  a: 12832,
  o: 13527,
  O: 325,
  p: 4784,
  n: 11186,
  '(': 236,
  d: 5825,
  U: 212,
  u: 4990,
  v: 2237,
  l: 6527,
  ')': 333,
  W: 324,
  "'": 891,
  C: 392,
  m: 4041,
  ',': 1217,
  '-': 643,
  c: 5587,
  f: 3137,
  w: 2920,
  '.': 2243,
  '\n': 787,
  M: 311,
  '@': 1966,
  B: 647,
  E: 359,
  k: 2068,
  I: 1414,
  A: 461,
  ':': 816,
  q: 264,
  y: 3532,
  '!': 261,
  '/': 1707,
  H: 336,
  Q: 82,
  G: 259,
  X: 123,
  '#': 303,
  _: 253,
  '"': 678,
  x: 499,
  P: 573,
  S: 770,
  '&': 133,
  ';': 150,
  D: 428,
  R: 276,
  '⤸': 2,
  '+': 49,
  '?': 374,
  Y: 212,
  '\ud83d': 159,
  '\ude05': 8,
  N: 270,
  j: 448,
  F: 336,
  z: 333,
  V: 134,
  '\udef0': 8,
  '\udc31': 1,
  '\ud83e': 37,
  '\udde0': 2,
  '\udd0c': 1,
  '❤': 6,
  '️': 15,
  K: 123,
  '*': 115,
  '=': 22,
  '|': 6,
  L: 254,
  Z: 85,
  J: 146,
  '\udde2': 8,
  '%': 16,
  '\ude0c': 1,
  '\udecb': 1,
  '\udc9c': 2,
  '\udcaa': 2,
  '\udd4c': 5,
  '\udd81': 3,
  '\udc99': 1,
  '\ud83c': 29,
  '\udf99': 4,
  '\udc49': 3,
  '\ude2d': 2,
  '\ude4f': 28,
  '\udc4f': 17,
  '’': 5,
  '`': 26,
  '—': 4,
  '\udc4c': 4,
  '\udc68': 2,
  '‍': 6,
  '\udfeb': 1,
  '\udee0': 1,
  '\udfb9': 1,
  '\udd25': 7,
  '\ude03': 2,
  '\udd1e': 5,
  '^': 3,
  '\udc46': 2,
  '\udd1d': 1,
  '\udf31': 2,
  '✂': 1,
  '\udcf7': 1,
  '\udd31': 1,
  '✍': 2,
  '✏': 1,
  '\udcbe': 1,
  '\udeab': 2,
  '\udcde': 1,
  '\ude30': 1,
  $: 15,
  '⃣': 1,
  '\udf51': 1,
  '\udca8': 1,
  '\udc4b': 2,
  '⚠': 1,
  '\udda4': 1,
  '\udea2': 1,
  '\udf10': 1,
  '\udf4e': 1,
  '\udfa7': 1,
  '☺': 1,
  '\udcfb': 1,
  '\udccc': 1,
  ' ': 5,
  '\udd3a': 1,
  '⚡': 1,
  '\udfdb': 2,
  '\udc85': 1,
  '⭐': 1,
  é: 2,
  '“': 2,
  '”': 2,
  '▶': 1,
  '◀': 1,
  λ: 2,
  '\ude2c': 3,
  '\ude31': 6,
  '\udc0c': 1,
  '\udfce': 1,
  '[': 10,
  ']': 10,
  '\udd7f': 1,
  '…': 2,
  '\ude23': 1,
  '\udde7': 3,
  '\uddf7': 3,
  ã: 5,
  ê: 1,
  '⬅': 1,
  '\udf89': 2,
  '\ude2a': 1,
  '\ude0e': 4,
  '\ude22': 1,
  '⏩': 1,
  '\udd96': 1,
  '\udea8': 2,
  '\udcbb': 1,
  '\udcc8': 1,
  '\ud835': 21,
  '\ude02': 3,
  '\ude00': 5,
  '\uddf2': 4,
  '\uddff': 2,
  '\uddee': 1,
  '\uddf4': 1,
  '\uddfb': 3,
  '\uddf0': 2,
  '\ude06': 1,
  '\uddfc': 1,
  '\ude01': 1,
  '⏱': 1,
  '\uddfa': 1,
  '\udd78': 2,
  '\udcc6': 2,
  '\udd73': 2,
  '\udf0d': 1,
  '\udd26': 1,
  '♂': 4,
  '\udfc6': 1,
  '\udd17': 1,
  '\udc4d': 2,
  '\udf6a': 1,
  '\udd14': 3,
  '~': 2,
  '\udd37': 2,
  '\udca3': 1,
  '\udd84': 1,
  '\ude33': 3,
  '\ude28': 1,
  '\udd2c': 1,
  '\ude4c': 2,
  '\udd28': 2,
  '៚': 2,
  '¯': 4,
  '\\': 2,
  ツ: 2,
  '⬆': 1,
  '\udd90': 1,
  '⚗': 1,
  '\udfc3': 1,
  '–': 1,
  '{': 1,
  '}': 1,
  '\uddd7': 1,
  '\udca9': 1,
  '\udd2f': 1,
  '™': 2,
  '\udceb': 1,
  '\ude20': 1,
  ú: 2,
  á: 5,
  õ: 1,
  '\udd05': 1,
  ó: 2,
  ç: 3,
  '✊': 1,
  í: 1,
  '\uddd0': 1,
  '\udc9b': 1,
  '\ude09': 1,
  '\udc01': 1,
  '\udfd6': 1,
}

// const countPairs = Object.entries(charCounts)
// const sortedCountPairs = countPairs.sort(
//   ([charA, countA], [charB, countB]) => countB - countA
// )

// function entriesToObject(arr) {
//   return Object.assign(...arr.map(([key, val]) => ({ [key]: val })))
// }

// export const charCounts = entriesToObject(sortedCountPairs)

// console.log(JSON.stringify(sortedCountPairs, null, 2))
